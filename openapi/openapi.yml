openapi: 3.0.0
servers:
  - description: API Server
    url: /api/v1.0
info:
  description: API mengenai bahan masakan online shop di Kota Bandung
  version: "1.0"
  title: API Bahan Masakan di Kota Bandung
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Operasi yang tersedia hanya untuk Admin terautentikasi (Secured Admin-only calls)
  - name: users
    description: Operasi yang tersedia untuk mengelola user
  - name: stores
    description: Operasi yang tersedia untuk mengelola toko
  - name: produk
    description: Operasi yang tersedia untuk mengelola produk
  - name: resep
    description: Operasi yang tersedia untuk mengelola resep
paths:
  /users:
    get:
      operationId: models.user.User.read_all
      tags:
        - admins
      summary: 'Mengambil data semua pengguna'
      description: 'Mengambil data semua pengguna'
      parameters:
        - name: api_key
          in: query
          description: API_KEY
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sukses mengambil data seluruh pengguna
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '204':
          description: Tidak ditemukan user dengan parameter yang telah diberikan
  '/users/{username}':
    get:
      operationId: models.user.User.read_one
      tags:
        - users
      summary: Mengambil profil pengguna menurut username
      description: Mengambil profil pengguna menurut username
      parameters:
        - name: api_key
          in: query
          description: API_KEY
          required: true
          schema:
            type: string
        - name: username
          in: path
          description: Username pengguna
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Berhasil membaca profil pengguna
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: Pengguna tidak dapat ditemukan
    put:
      operationId: models.user.User.update
      tags:
        - users
      summary: Update pengguna
      description: Update pengguna
      parameters:
        - name: api_key
          in: query
          description: API_KEY
          required: true
          schema:
            type: string
        - name: username
          in: path
          description: Username pengguna yang akan di-update
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sukses update pengguna
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: Pengguna tidak dapat ditemukan
        '409':
          description: Email telah digunakan pengguna lain
      requestBody:
        required: true
        description: Pengguna yang akan diupdate
        content:
          application/json:
            schema:
              x-body-name: user
              type: object
              properties:
                nama_lengkap:
                  type: string
                  description: Nama lengkap pengguna
                email:
                  type: string
                  description: Email pengguna
              required:
                - nama_lengkap
                - email
    delete:
      operationId: models.user.User.delete
      tags:
        - users
      summary: Menghapus pengguna dari daftar
      description: Menghapus pengguna
      parameters:
        - name: api_key
          in: query
          description: API_KEY
          required: true
          schema:
            type: string
        - name: username
          in: path
          description: Username pengguna yang akan dihapus
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Berhasil menghapus pengguna
        '404':
          description: Pengguna tidak dapat ditemukan
  '/users/reset_password':
    put:
      operationId: models.user.User.reset_password
      tags:
        - users
      summary: Reset password pengguna
      description: Reset password pengguna
      parameters:
        - name: api_key
          in: query
          description: API_KEY
          required: true
          schema:
            type: string
        - name: username
          in: query
          description: Username pengguna yang akan di-reset password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sukses reset password pengguna
        '404':
          description: Pengguna tidak dapat ditemukan
      requestBody:
        required: true
        description: Pengguna yang akan diupdate
        content:
          application/json:
            schema:
              x-body-name: user
              type: object
              properties:
                password:
                  type: string
                  description: Password yang akan di-update
              required:
                - password
  /users/register:
    post:
      operationId: models.user.User.register_user
      tags:
        - users
      summary: Membuat pengguna API
      description: Membuat pengguna API baru
      responses:
        '201':
          description: Berhasil membuat pengguna baru
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Format email tidak sesuai
        '409':
          description: Email untuk registrasi sudah pernah dipakai
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: user
              type: object
              properties:
                username:
                  type: string
                  example: 'fuland'
                password:
                  type: string
                  example: 'fuland1234!'
                email:
                  type: string
                  example: 'fuland.gundah@example.mail.com'
                nama_lengkap:
                  type: string
                  example: 'Fuland Gundah Gulana'
        description: Pengguna yang akan didaftarkan
        required: true
  /users/login:
    put:
      operationId: models.user.User.login_user
      tags:
        - users
      summary: Login pengguna Web API
      description: Login pengguna Web API dengan menggunakan email dan password
      responses:
        '200':
          description: Berhasil login
      requestBody:
        content:
          application/json:
            schema:
              x-body-name: user
              type: object
              properties:
                email:
                  type: string
                  example: 'fuland.gundah@example.mail.com'
                password:
                  type: string
                  example: 'fuland1234!'
        description: Pengguna yang akan login
        required: true
  /stores:
    get:
      operationId: models.store.Store.read_all
      tags:
        - stores
      summary: 'Mengambil semua data toko, diurutkan menurut nama'
      description: 'Mengambil semua data toko, diurutkan menurut nama'
      parameters:
        - name: api_key
          in: query
          description: API_KEY
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Berhasil mengambil data seluruh toko
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
        '204':
          description: Tidak dapat ditemukan toko dengan parameter yang telah diberikan
    post:
      operationId: models.store.Store.create
      tags:
        - admins
      summary: Membuat toko
      description: Membuat toko
      parameters:
        - name: api_key
          in: query
          description: API_KEY
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Berhasil membuat toko
          content:
            application/json:
              schema:
               type: object
               items:
                $ref: '#/components/schemas/Store'
        '409':
          description: Toko sudah ada dalam database
      requestBody:
        required: true
        description: Toko yang akan dibuat
        content:
          application/json:
            schema:
              x-body-name: store
              type: object
              properties:
                nama_toko:
                  type: string
                  description: Nama toko
                deskripsi:
                  type: string
                  description: Deskripsi toko
                link_toko:
                  type: string
                  description: URL toko
              required:
                - nama_toko
                - deskripsi
                - link_toko
  '/stores/{store_id}':
    get:
      operationId: models.store.Store.read_one
      tags:
        - stores
      summary: Mengambil data salah satu toko menurut id
      description: Mengambil data salah satu toko menurut id
      parameters:
        - name: api_key
          in: query
          description: API_KEY
          required: true
          schema:
            type: string
        - name: store_id
          in: path
          description: Id toko yang akan diambil
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Berhasil membaca data toko menurut id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
        '404':
          description: Toko tidak dapat ditemukan
    put:
      operationId: models.store.Store.update
      tags:
        - admins
      summary: Update sebuah toko
      description: Update sebuah toko
      parameters:
        - name: api_key
          in: query
          description: API_KEY
          required: true
          schema:
            type: string
        - name: store_id
          in: path
          description: Id toko yang akan di-update
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sukses update toko
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Store'
        '404':
          description: Toko tidak dapat ditemukan
        '409':
          description: Toko telah ada dalam database
      requestBody:
        required: true
        description: Toko yang akan diupdate
        content:
          application/json:
            schema:
              x-body-name: store
              type: object
              properties:
                nama_toko:
                  type: string
                  description: Nama toko
                deskripsi:
                  type: string
                  description: Deskripsi toko
                link_toko:
                  type: string
                  description: URL toko
              required:
                - nama_toko
                - deskripsi
                - link_toko
    delete:
      operationId: models.store.Store.delete
      tags:
        - admins
      summary: Menghapus toko dari daftar
      description: Menghapus toko
      parameters:
        - name: api_key
          in: query
          description: API_KEY
          required: true
          schema:
            type: string
        - name: store_id
          in: path
          description: Id toko yang akan dihapus
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Berhasil menghapus toko
        '404':
          description: Toko tidak dapat ditemukan
  /produk:
    get:
      operationId: models.product.Product.read_all
      tags:
        - produk
      summary: 'Mencari data produk berdasarkan parameter tertentu'
      description: 'Mencari data produk berdasarkan parameter tertentu'
      parameters:
        - name: api_key
          in: query
          description: API_KEY
          required: true
          schema:
            type: string
        - name: f
          in: query
          description: field/atribut pencarian (item harus sama banyak dengan parameter v)
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
        - name: v
          in: query
          description: nilai dari field/atribut pencarian (item harus sama banyak dengan parameter f)
          required: true
          schema:
            type: array
            items:
              type: string
          explode: false
        - name: sort
          in: query
          description: field/atribute yang digunakan sebagai acuan sorting (default=nama_produk)
          required: false
          schema:
            type: array
            items:
              type: string
          explode: false
        - name: offset
          in: query
          description: posisi awal record pada hasil pencarian (default=0)
          required: false
          schema:
            type: integer
            example: '0'
        - name: limit
          in: query
          description: batas jumlah record hasil pencarian (default=10, max=50)
          required: false
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Berhasil mengambil data sebagian produk
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Produk'
        '204':
          description: Tidak dapat ditemukan produk dengan parameter yang telah diberikan
        '400':
          description: Bad request parameter
  /produk/resep:
    get:
      operationId: models.product.Product.read_resep
      tags:
        - produk
      summary: 'Mengambil sebagian data produk menurut resep yang dicari'
      description: 'Mengambil sebagian data produk menurut resep yang dicari'
      parameters:
        - name: api_key
          in: query
          description: API_KEY
          required: true
          schema:
            type: string
        - name: q
          in: query
          description: query pencarian
          required: true
          schema:
            type: string
          explode: false
        - name: sort
          in: query
          description: field/atribute yang digunakan sebagai acuan sorting (default=nama_produk)
          required: false
          schema:
            type: array
            items:
              type: string
          explode: false
        - name: offset
          in: query
          description: posisi awal record pada hasil pencarian (default=0)
          required: false
          schema:
            type: integer
            example: '0'
        - name: limit
          in: query
          description: batas jumlah record hasil pencarian (default=10, max=50)
          required: false
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Berhasil mengambil data sebagian produk
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Produk'
        '204':
          description: Tidak dapat ditemukan produk dengan parameter yang telah diberikan
        '400':
          description: Bad request parameter
  /produk/komplemen:
    get:
      operationId: models.product.Product.read_komplemen
      tags:
        - produk
      summary: 'Mengambil sebagian data produk komplemen sebagai rekomendasi atas pencarian produk tertentu'
      description: 'Mengambil sebagian data produk komplemen sebagai rekomendasi atas pencarian produk tertentu'
      parameters:
        - name: api_key
          in: query
          description: API_KEY
          required: true
          schema:
            type: string
        - name: q
          in: query
          description: query pencarian
          required: true
          schema:
            type: string
          explode: false
        - name: sort
          in: query
          description: field/atribute yang digunakan sebagai acuan sorting (default=nama_produk)
          required: false
          schema:
            type: array
            items:
              type: string
          explode: false
        - name: offset
          in: query
          description: posisi awal record pada hasil pencarian (default=0)
          required: false
          schema:
            type: integer
            example: '0'
        - name: limit
          in: query
          description: batas jumlah record hasil pencarian (default=10, max=50)
          required: false
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Berhasil mengambil data sebagian produk
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Produk'
        '204':
          description: Tidak dapat ditemukan produk dengan parameter yang telah diberikan
        '400':
          description: Bad request parameter
  /resep/produk:
    get:
      operationId: models.recipe.Recipe.read_produk
      tags:
        - resep
      summary: 'Mengambil sebagian data resep menurut produk yang digunakan'
      description: 'Mengambil sebagian data resep menurut produk yang digunakan'
      parameters:
        - name: api_key
          in: query
          description: API_KEY
          required: true
          schema:
            type: string
        - name: q
          in: query
          description: query pencarian
          required: true
          schema:
            type: string
          explode: false
      responses:
        '200':
          description: Berhasil mengambil data sebagian resep dari API eksternal
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resep'
        '204':
          description: Tidak dapat ditemukan resep dengan parameter yang telah diberikan
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: 'fuland'
        nama_lengkap:
          type: string
          example: 'Fuland Gundah Gulana'
        email:
          type: string
          example: 'fuland.gundah@example.mail.com'
        last_login:
          type: string
          format: date-time
          example: '2019-10-29 09:12'
        api_key:
          type: string
          example: 'd290f1ee-6c54-4b01-90e6-d701748f0851'
        hits:
          type: integer
          example: 12
    Store:
      type: object
      properties:
        _id:
          type: string
          example: 'd290f1ee-6c54-4b01-90e6-d701748f0851'
        nama_toko:
          type: string
          example: 'Toko Fuland'
        deskripsi:
          type: string
          example: 'Toko Kelontong Fuland'
        link_toko:
          type: string
          example: 'http://tokofuland.com'
    Produk:
      type: object
      properties:
        _id:
          type: string
          example: 'd290f1ee-6c54-4b01-90e6-d701748f0851'
        sumber:
          type: string
          example: 'mydepartmentstore.com'
        tgl_crawl:
          type: string
          example: '2019-11-10 12:14'
        nama_produk:
          type: string
          example: 'Beef Giling'
        link_produk:
          type: string
          example: 'https://mydepartmentstore.com/produk/beef-giling-tanpa-pengawet'
        deskripsi:
          type: string
          example: 'Daging sapi giling'
        thumb:
          type: string
          example: 'https://mydepartmentstore.com/gambar/beef-giling-tanpa-pengawet.jpg'
        harga_unit:
          type: number
          example: '20000'
        harga_awal:
          type: number
          example: '40000'
        harga:
          type: number
          example: '35000'
        discount:
          type: string
          example: '12.5%'
        qty:
          type: string
          example: '1 bungkus'
        qty_unit:
          type: string
          example: '1 bungkus'
        nama_toko:
          type: string
          example: 'Toko Fuland'
        link_toko:
          type: string
          example: 'http://mydepartmentstore.com/toko/toko-fuland'
    Resep:
      type: object
      properties:
        resep_id:
          type: string
        nama_resep:
          type: string
        penulis:
          type: string
        tags:
          type: string
        timestamp:
          type: string
        bahan:
          type: array
          items:
            $ref: '#/components/schemas/Bahan'
    Bahan:
      type: object
      properties:
        bahan_id:
          type: string
        nama_bahan:
          type: string
        kuantitas:
          type: string
        satuan:
          type: string
        timestamp:
          type: string
        resep_id:
          type: string
